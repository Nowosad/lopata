// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_lopata_RCPPEXPORTS_H_GEN_
#define RCPP_lopata_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace lopata {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("lopata", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("lopata", "_lopata_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in lopata");
            }
        }
    }

    inline int get_motifel_size(int num_r, int num_c, int shift) {
        typedef SEXP(*Ptr_get_motifel_size)(SEXP,SEXP,SEXP);
        static Ptr_get_motifel_size p_get_motifel_size = NULL;
        if (p_get_motifel_size == NULL) {
            validateSignature("int(*get_motifel_size)(int,int,int)");
            p_get_motifel_size = (Ptr_get_motifel_size)R_GetCCallable("lopata", "_lopata_get_motifel_size");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_motifel_size(Shield<SEXP>(Rcpp::wrap(num_r)), Shield<SEXP>(Rcpp::wrap(num_c)), Shield<SEXP>(Rcpp::wrap(shift)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline List get_motifels_coma(IntegerMatrix x, const arma::imat directions, int size, int shift, const std::string fun = "mean", const std::string na_action = "replace") {
        typedef SEXP(*Ptr_get_motifels_coma)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_motifels_coma p_get_motifels_coma = NULL;
        if (p_get_motifels_coma == NULL) {
            validateSignature("List(*get_motifels_coma)(IntegerMatrix,const arma::imat,int,int,const std::string,const std::string)");
            p_get_motifels_coma = (Ptr_get_motifels_coma)R_GetCCallable("lopata", "_lopata_get_motifels_coma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_motifels_coma(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(directions)), Shield<SEXP>(Rcpp::wrap(size)), Shield<SEXP>(Rcpp::wrap(shift)), Shield<SEXP>(Rcpp::wrap(fun)), Shield<SEXP>(Rcpp::wrap(na_action)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List get_motifels_wecoma(IntegerMatrix x, NumericMatrix w, const arma::imat directions, int size, int shift, const std::string fun = "mean", const std::string na_action = "replace") {
        typedef SEXP(*Ptr_get_motifels_wecoma)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_motifels_wecoma p_get_motifels_wecoma = NULL;
        if (p_get_motifels_wecoma == NULL) {
            validateSignature("List(*get_motifels_wecoma)(IntegerMatrix,NumericMatrix,const arma::imat,int,int,const std::string,const std::string)");
            p_get_motifels_wecoma = (Ptr_get_motifels_wecoma)R_GetCCallable("lopata", "_lopata_get_motifels_wecoma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_motifels_wecoma(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(directions)), Shield<SEXP>(Rcpp::wrap(size)), Shield<SEXP>(Rcpp::wrap(shift)), Shield<SEXP>(Rcpp::wrap(fun)), Shield<SEXP>(Rcpp::wrap(na_action)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List get_motifels_cocoma(IntegerMatrix x, IntegerMatrix y, const arma::imat directions, int size, int shift) {
        typedef SEXP(*Ptr_get_motifels_cocoma)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_motifels_cocoma p_get_motifels_cocoma = NULL;
        if (p_get_motifels_cocoma == NULL) {
            validateSignature("List(*get_motifels_cocoma)(IntegerMatrix,IntegerMatrix,const arma::imat,int,int)");
            p_get_motifels_cocoma = (Ptr_get_motifels_cocoma)R_GetCCallable("lopata", "_lopata_get_motifels_cocoma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_motifels_cocoma(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(directions)), Shield<SEXP>(Rcpp::wrap(size)), Shield<SEXP>(Rcpp::wrap(shift)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List get_motifels_incoma(const List input, const arma::imat directions, int size, int shift, const std::string fun = "mean", const std::string na_action = "replace") {
        typedef SEXP(*Ptr_get_motifels_incoma)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_motifels_incoma p_get_motifels_incoma = NULL;
        if (p_get_motifels_incoma == NULL) {
            validateSignature("List(*get_motifels_incoma)(const List,const arma::imat,int,int,const std::string,const std::string)");
            p_get_motifels_incoma = (Ptr_get_motifels_incoma)R_GetCCallable("lopata", "_lopata_get_motifels_incoma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_motifels_incoma(Shield<SEXP>(Rcpp::wrap(input)), Shield<SEXP>(Rcpp::wrap(directions)), Shield<SEXP>(Rcpp::wrap(size)), Shield<SEXP>(Rcpp::wrap(shift)), Shield<SEXP>(Rcpp::wrap(fun)), Shield<SEXP>(Rcpp::wrap(na_action)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_lopata_RCPPEXPORTS_H_GEN_
